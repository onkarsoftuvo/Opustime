c
attempt_obj
n
request.remote_ip
params
c
params
c
params 
c
result
nesult
n
c
appnt.treatment_notes.last.try(:save_final)
c
appnt.treatment_notes.last.try(:save_final)
c
appointments.active_appointment.map{|k| k.treatment_notes.last}
appointments.active_appointment.map{|k| k.treatment_notes.last.save_final}
appointments.active_appointment.map{|k| k.treatment_note.save_final}
appointments.active_appointment.count
appnt.treatment_notes.last
c
params
c
appointment_activities
n
c
<<<<<<< HEAD
gateway_response
c
payable_amount
 wallet_amount
subscription.cost.to_f
payable_amount
company
c
gateway_response
c
next_plan
gateway_response
c
gateway_response['response'].eql?('1')
if gateway_response['response'].eql?('1')
gateway_response
c
company_id
c
n
gateway_response
n
next_billing_cycle
subscription
company
n
wallet_amount.to_f > subscription.cost.to_f
n
next_billing_cycle
current_billing_cycle
n
company
n
company_id
=======
send_to_email = other_email.nil? ? patient.email : other_email
n
appnt_id
c
n
email_send_to
patient
c
attachments
attachments['logo.jpg']
attachments['logo.jpg'].try(:url) 
c
@email_content
c
n
c
>>>>>>> 5c19a2c05ba9db31e9c161e58c16ee21155559e3
continue
c
((company.get_reminder_day_time)>= Time.now)  && ( (company.get_reminder_day_time)<= (Time.now + 59.minutes) )
c
appointments.length
n
c
((company.get_reminder_day_time)>= Time.now)  && ( (company.get_reminder_day_time)<= (Time.now + 59.minutes) )
Time.now
company.get_reminder_day_time
n
c
company.get_reminder_day_time
n
c
company.get_reminder_day_time
company.get_reminder_day_time)
n
c
Time.now + 59.minutes
company.get_reminder_day_time
 ((company.get_reminder_day_time)>= Time.now)  && ( (company.get_reminder_day_time)<= (Time.now + 59.minutes) )
company.get_reminder_day_time
company.get_reminder_day_time)
Time.now + 59.minutes
(company.get_reminder_day_time)<= (Time.now + 59.minutes)
(company.get_reminder_day_time)>= Time.now
(company.get_reminder_day_time)>= Time.now) )
(company.get_reminder_day_time)>= Time.now) 
company.get_reminder_day_time
((company.get_reminder_day_time)>= Time.now)  && ( (company.get_reminder_day_time)<= (Time.now + 59.minutes) )
c
appointments.length
n
c
n
company.get_reminder_day_time
c
apnt.patient
c
reminder_setting.sms_enabled
reminder_setting.d_reminder_type
n
reminder_setting.d_reminder_type.eql?'None'
n
reminder_setting.apply_reminder_type_to_all
n
c
appointments[1].patient
appointments[0].patient
appointments.count
c
exit
custom_time.utc
custom_time
n
c
self
self.reminder_time.to_i
custom_time
n
current_time
n
c
((company.get_reminder_day_time)>= Time.now)  && ( (company.get_reminder_day_time)<= Time.now + 59.minutes )
(company.get_reminder_day_time)
c
(Time.now <= (company.get_reminder_day_time))  && (Time.now  >= (company.get_reminder_day_time + 59.minutes))
(company.get_reminder_day_time + 59.minutes)
(Time.now  >= (company.get_reminder_day_time + 59.minutes))
(Time.now <= (company.get_reminder_day_time))
(company.get_reminder_day_time)
Time.now
c
(Time.now <= (company.get_reminder_day_time))  && (Time.now  >= (company.get_reminder_day_time))
company.get_reminder_day_time
n
(reminder_setting.skip_weekends && (['0','6'].include?(Time.now.strftime('%w'))))
n
c
reminder_setting.reminder_period.to_i
day_after_appnt == reminder_setting.reminder_period.to_i
day_after_appnt
n
c
apnt.patient.company.appointment_reminder
apnt.company.appointment_reminder
c
n
appointments.count
c
@url_reschedule
@url_cancel
n
Rails.logger.info ' ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
c
n
c
@url_reschedule 
@url_cancel 
c
@user
n
c
patient.valid?
n
 params[:appointment][:new_patient][:contact_no]
((params[:appointment][:new_patient][:contact_no].nil?) & (params[:appointment][:new_patient][:contact_type].nil?))
patient.new_record?
n
patient.new_record?
n
params
c
 Rails.env.to_s.eql?'development'
c
custom_time = DateTime.new(current_time.strftime('%Y').to_i , current_time.strftime('%m').to_i , current_time.strftime('%d').to_i , self.reminder_time.to_i , 0 , 0 , time_zone_offset)
time_zone_offset
custom_time.utc.strftime('%H').to_i
custom_time
custom_time.utc.strftime('%H').to_i
n
custom_time
n
time_zone_offset
current_time
n
c
comp.sms_setting.update(default_sms: 100)
comp.sms_setting.default_sms 
comp.sms_setting.default_sms > 0
n
((sms_setting_no.nil?) || (sms_setting_no.blank?))
n
comp.sms_setting.mob_no
c
email_subject.nil? || email_subject.blank?
c
@appnt
 (@email_content.nil? || @email_content.blank?)
c
content_with_html
subject_with_html
n
email_content.nil?
n
/#{replace_data.keys.join('|')}/
replace_data
n
c
n
appnt.business
c
hour
meridian
c
time_zone_offset
c
exit
DateTime.new(2016,5,8,7,5,6 , "+530").utc
DateTime.new(2016,5,8,7,5,6 , "+530")
DateTime.new(2016,5,8,7,5,6)
DateTime.new(2016,5,8,7,5,6
AppointmentReminder.last.time_zone_offset
AppointmentReminder.last
AppointmentReminder
DateTime.new(2016,5,8,7,5,6)
DateTime.now
Time.now
cm = Company.find(37)
cm
time_zone_offset
n
c
n
c
comp.sms_setting.default_sms 
